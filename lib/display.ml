type t = bool array array

let character_set = [|
    0xf0; 0x90; 0x90; 0x90; 0xf0;
    0x20; 0x60; 0x20; 0x20; 0x70;
    0xf0; 0x10; 0xf0; 0x80; 0xf0;
    0xf0; 0x10; 0xf0; 0x10; 0xf0;
    0x90; 0x90; 0xf0; 0x10; 0x10;
    0xf0; 0x80; 0xf0; 0x10; 0xf0;
    0xf0; 0x80; 0xf0; 0x90; 0xf0;
    0xf0; 0x10; 0x20; 0x40; 0x40;
    0xf0; 0x90; 0xf0; 0x90; 0xf0;
    0xf0; 0x90; 0xf0; 0x10; 0xf0;
    0xf0; 0x90; 0xf0; 0x90; 0x90;
    0xe0; 0x90; 0xe0; 0x90; 0xe0;
    0xf0; 0x80; 0x80; 0x80; 0xf0;
    0xf0; 0x90; 0x90; 0x90; 0xe0;
    0xf0; 0x80; 0xf0; 0x80; 0xf0;
    0xf0; 0x80; 0xf0; 0x80; 0x80
  |]

(* The original implementation of the Chip-8 language used a 64x32-pixel monochrome display *)
let x_width = 64
let y_height = 32

let create () = Array.make_matrix y_height x_width false

let clear (s : t) =
  for x = 0 to x_width - 1 do
    for y = 0 to y_height - 1 do
      s.(y).(x) <- false
    done
  done

let is_set (s : t) (x : int) (y : int) =
  s.(y).(x)

let set (s : t) (x : int) (y : int) =
  s.(y).(x) <- true

let set_b (s : t) (x : int) (y : int) (b : bool) =
  s.(y).(x) <- b
