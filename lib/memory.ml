open Stdint

type t = bytes

let create () =
  let mem = Bytes.create 4096 in
  let sprites = [|
      0xF0; 0x90; 0x90; 0x90; 0xF0;
      0x20; 0x60; 0x20; 0x20; 0x70;
      0xF0; 0x10; 0xF0; 0x80; 0xF0;
      0xF0; 0x10; 0xF0; 0x10; 0xF0;
      0x90; 0x90; 0xF0; 0x10; 0x10;
      0xF0; 0x80; 0xF0; 0x10; 0xF0;
      0xF0; 0x80; 0xF0; 0x90; 0xF0;
      0xF0; 0x10; 0x20; 0x40; 0x40;
      0xF0; 0x90; 0xF0; 0x90; 0xF0;
      0xF0; 0x90; 0xF0; 0x10; 0xF0;
      0xF0; 0x90; 0xF0; 0x90; 0x90;
      0xE0; 0x90; 0xE0; 0x90; 0xE0;
      0xF0; 0x80; 0x80; 0x80; 0xF0;
      0xE0; 0x90; 0x90; 0x90; 0xE0;
      0xF0; 0x80; 0xF0; 0x80; 0xF0;
      0xF0; 0x80; 0xF0; 0x80; 0x80
    |] in
  for i = 0 to (Array.length sprites - 1) do
    sprites.(i) |> Char.chr |> Bytes.set mem i
  done;
  mem
  
let read_uint8 (t : t) (n : uint16) =
  Bytes.get_uint8 t (Uint16.to_int n) |> Uint8.of_int

let read_uint16 (t : t) (n : uint16) =
  Bytes.get_uint16_be t (Uint16.to_int n) |> Uint16.of_int

let write_uint8 (t : t) (n : uint16) (data : uint8) =
  Bytes.set_uint8 t (Uint16.to_int n) (Uint8.to_int data)

let write_uint16 (t : t) (n : uint16) (data : uint16) =
  Bytes.set_uint8 t (Uint16.to_int n) (Uint16.to_int data)
